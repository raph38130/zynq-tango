/*----- PROTECTED REGION ID(Redpitaya.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Redpitaya.cpp
//
// description : C++ source for the Redpitaya class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Redpitaya are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Redpitaya.h>
#include <RedpitayaClass.h>
#include "/home/raph/RedPitaya/SDK/include/rp.h"
/*----- PROTECTED REGION END -----*/	//	Redpitaya.cpp

/**
 *  Redpitaya class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  V0in     |  Tango::DevDouble	Scalar
//  V0out    |  Tango::DevDouble	Scalar
//  Led      |  Tango::DevBoolean	Scalar
//  Signal0  |  Tango::DevDouble	Spectrum  ( max = 16384)
//  Signal1  |  Tango::DevDouble	Spectrum  ( max = 16384)
//================================================================

namespace Redpitaya_ns
{
/*----- PROTECTED REGION ID(Redpitaya::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Redpitaya::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Redpitaya::Redpitaya()
 *	Description : Constructors for a Tango device
 *                implementing the classRedpitaya
 */
//--------------------------------------------------------
Redpitaya::Redpitaya(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Redpitaya::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::constructor_1
}
//--------------------------------------------------------
Redpitaya::Redpitaya(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Redpitaya::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::constructor_2
}
//--------------------------------------------------------
Redpitaya::Redpitaya(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Redpitaya::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Redpitaya::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Redpitaya::delete_device()
{
	DEBUG_STREAM << "Redpitaya::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Redpitaya::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::delete_device
	delete[] attr_V0in_read;
	delete[] attr_Signal0_read;
	delete[] attr_Signal1_read;
}

//--------------------------------------------------------
/**
 *	Method      : Redpitaya::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Redpitaya::init_device()
{
	DEBUG_STREAM << "Redpitaya::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Redpitaya::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	if(rp_Init() != RP_OK){
		DEBUG_STREAM <<  "Redpitaya api init failed! "<< endl;
	}
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::init_device_before
	
	//	No device property to be read from database
	
	attr_V0in_read = new Tango::DevDouble[1];
	attr_Signal0_read = new Tango::DevDouble[16384];
	attr_Signal1_read = new Tango::DevDouble[16384];
	/*----- PROTECTED REGION ID(Redpitaya::init_device) ENABLED START -----*/
	
	//	Initialize device
	set_state(Tango::ON);
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::init_device
}


//--------------------------------------------------------
/**
 *	Method      : Redpitaya::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Redpitaya::always_executed_hook()
{
	DEBUG_STREAM << "Redpitaya::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Redpitaya::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Redpitaya::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Redpitaya::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Redpitaya::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Redpitaya::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Redpitaya::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Redpitaya::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Redpitaya::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Redpitaya::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute V0in related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Redpitaya::read_V0in(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Redpitaya::read_V0in(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Redpitaya::read_V0in) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_V0in_read);
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::read_V0in
}
//--------------------------------------------------------
/**
 *	Write attribute V0out related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Redpitaya::write_V0out(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Redpitaya::write_V0out(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Redpitaya::write_V0out) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::write_V0out
}
//--------------------------------------------------------
/**
 *	Write attribute Led related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Redpitaya::write_Led(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Redpitaya::write_Led(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Redpitaya::write_Led) ENABLED START -----*/
	if (w_val) {
	   rp_DpinSetState(RP_LED4, RP_HIGH);
           DEBUG_STREAM << "LED ON ... " << endl;
	}
	else {
	   rp_DpinSetState(RP_LED4, RP_LOW);
	   DEBUG_STREAM << "LED OFF ..." << endl;
	}
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::write_Led
}
//--------------------------------------------------------
/**
 *	Read attribute Signal0 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void Redpitaya::read_Signal0(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Redpitaya::read_Signal0(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Redpitaya::read_Signal0) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Signal0_read, 16384);
	
        FILE *pf;
        char data[128];

    	pf = popen("/opt/bin/acquire 16384 1024","r"); 
    	int i=0,n;
	while(i<16383) {
		fgets(data, 512 , pf);
		sscanf(data,"%d", &n);
//DEBUG_STREAM << "i=" << i << " n=" << n <<endl;
		attr_Signal0_read[i++]=n;
	}
    	// the data is now in 'data'
    	if (pclose(pf) != 0)
        DEBUG_STREAM << " Error: Failed to close command stream \n"<<endl;

	/*----- PROTECTED REGION END -----*/	//	Redpitaya::read_Signal0
}
//--------------------------------------------------------
/**
 *	Read attribute Signal1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void Redpitaya::read_Signal1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Redpitaya::read_Signal1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Redpitaya::read_Signal1) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Signal1_read, 16384);
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::read_Signal1
}

//--------------------------------------------------------
/**
 *	Method      : Redpitaya::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Redpitaya::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Redpitaya::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Redpitaya::add_dynamic_attributes
}


/*----- PROTECTED REGION ID(Redpitaya::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Redpitaya::namespace_ending
} //	namespace
