/*----- PROTECTED REGION ID(ZedGPIO.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        ZedGPIO.cpp
//
// description : C++ source for the ZedGPIO class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               ZedGPIO are implemented in this file.
//
// project :     ZedBoard Tango Gateway
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <ZedGPIO.h>
#include <ZedGPIOClass.h>
#include <sys/stat.h> 
#include <fcntl.h>
/*----- PROTECTED REGION END -----*/	//	ZedGPIO.cpp

/**
 *  ZedGPIO class description:
 *    proof of concept :
 *    a tango DS for Zynq with OpenEmbedded toolchain
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Start         |  start
//  Stop          |  stop
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Switches  |  Tango::DevUChar	Scalar
//  Led0      |  Tango::DevBoolean	Scalar
//  Led1      |  Tango::DevBoolean	Scalar
//  Led2      |  Tango::DevBoolean	Scalar
//  Led3      |  Tango::DevBoolean	Scalar
//  Led4      |  Tango::DevBoolean	Scalar
//  Led5      |  Tango::DevBoolean	Scalar
//  Led6      |  Tango::DevBoolean	Scalar
//  Led7      |  Tango::DevBoolean	Scalar
//================================================================

namespace ZedGPIO_ns
{
/*----- PROTECTED REGION ID(ZedGPIO::namespace_starting) ENABLED START -----*/

//	static initializations
void write_zed_leds(int i, bool val) {
	char buffer[32];
	sprintf(buffer,"/sys/class/gpio/gpio%d/value",1016+i);
	    int gpio = open(buffer, O_WRONLY);
	    if (val)
		write(gpio, "1", 1);
	    else 
		write(gpio, "0", 1);
	    close(gpio);
}
/*----- PROTECTED REGION END -----*/	//	ZedGPIO::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : ZedGPIO::ZedGPIO()
 *	Description : Constructors for a Tango device
 *                implementing the classZedGPIO
 */
//--------------------------------------------------------
ZedGPIO::ZedGPIO(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(ZedGPIO::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::constructor_1
}
//--------------------------------------------------------
ZedGPIO::ZedGPIO(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(ZedGPIO::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::constructor_2
}
//--------------------------------------------------------
ZedGPIO::ZedGPIO(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(ZedGPIO::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : ZedGPIO::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void ZedGPIO::delete_device()
{
	DEBUG_STREAM << "ZedGPIO::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::delete_device
	delete[] attr_Switches_read;
}

//--------------------------------------------------------
/**
 *	Method      : ZedGPIO::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void ZedGPIO::init_device()
{
	DEBUG_STREAM << "ZedGPIO::init_device() create device, should be TANGO VERSION 9 !!! " << device_name << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	set_state(Tango::OFF);
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::init_device_before
	
	//	No device property to be read from database
	
	attr_Switches_read = new Tango::DevUChar[1];
	/*----- PROTECTED REGION ID(ZedGPIO::init_device) ENABLED START -----*/
	
	//	Initialize device
        char buffer [32];
    	for (int i=0; i<8; i++)
	    {
	    int exp = open("/sys/class/gpio/export", O_WRONLY);
	    sprintf(buffer, "%d", 1016+i);
	    write(exp, buffer, 4);
	    close(exp);
	    sprintf(buffer,"/sys/class/gpio/gpio%d/direction",1016+i);
	    int dir = open(buffer, O_WRONLY);
	    write(dir, "out", 3);
	    close(dir);
	    }
    	for (int i=0; i<8; i++)
	    {
	    int exp = open("/sys/class/gpio/export", O_WRONLY);
	    sprintf(buffer, "%d", 1008+i);
	    write(exp, buffer, 4);
	    close(exp);
	    sprintf(buffer,"/sys/class/gpio/gpio%d/direction",1008+i);
	    int dir = open(buffer, O_WRONLY);
	    write(dir, "in", 2);
	    close(dir);
	    }
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::init_device
}


//--------------------------------------------------------
/**
 *	Method      : ZedGPIO::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void ZedGPIO::always_executed_hook()
{
	DEBUG_STREAM << "ZedGPIO::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : ZedGPIO::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void ZedGPIO::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "ZedGPIO::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : ZedGPIO::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void ZedGPIO::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "ZedGPIO::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Switches related method
 *	Description: 
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::read_Switches(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::read_Switches(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::read_Switches) ENABLED START -----*/
	//	Set the attribute value

	char buffer[32];
	
	*attr_Switches_read=0;
    	for (int i=0; i<8; i++)
	    {
	    sprintf(buffer,"/sys/class/gpio/gpio%d/value",1008+i);
	    int gpio = open(buffer, O_RDONLY);
	    
	    read(gpio, buffer, 1);
	    (*attr_Switches_read) <<= 1;
	    (*attr_Switches_read) |= ( (*buffer) & 1);

	    close(gpio);
	    }
	attr.set_value(attr_Switches_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::read_Switches
}
//--------------------------------------------------------
/**
 *	Write attribute Led0 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led0(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led0(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led0) ENABLED START -----*/
	write_zed_leds(0, ((int) w_val));
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led0
}
//--------------------------------------------------------
/**
 *	Write attribute Led1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led1(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led1(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led1) ENABLED START -----*/
	write_zed_leds(1, ((int) w_val));
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led1
}
//--------------------------------------------------------
/**
 *	Write attribute Led2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led2(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led2(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led2) ENABLED START -----*/
	write_zed_leds(2, ((int) w_val));
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led2
}
//--------------------------------------------------------
/**
 *	Write attribute Led3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led3(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led3(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led3) ENABLED START -----*/
	write_zed_leds(3, ((int) w_val));
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led3
}
//--------------------------------------------------------
/**
 *	Write attribute Led4 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led4(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led4(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led4) ENABLED START -----*/
	write_zed_leds(4, ((int) w_val));
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led4
}
//--------------------------------------------------------
/**
 *	Write attribute Led5 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led5(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led5(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led5) ENABLED START -----*/
	
	write_zed_leds(5, ((int) w_val));
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led5
}
//--------------------------------------------------------
/**
 *	Write attribute Led6 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led6(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led6(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led6) ENABLED START -----*/
	write_zed_leds(6, ((int) w_val));
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led6
}
//--------------------------------------------------------
/**
 *	Write attribute Led7 related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZedGPIO::write_Led7(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZedGPIO::write_Led7(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZedGPIO::write_Led7) ENABLED START -----*/
	
	write_zed_leds(7, ((int) w_val));
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::write_Led7
}

//--------------------------------------------------------
/**
 *	Method      : ZedGPIO::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void ZedGPIO::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(ZedGPIO::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Start related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void ZedGPIO::start()
{
	DEBUG_STREAM << "ZedGPIO::Start()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::start) ENABLED START -----*/
	
	//	Add your own code
	set_state(Tango::ON);
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::start
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void ZedGPIO::stop()
{
	DEBUG_STREAM << "ZedGPIO::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZedGPIO::stop) ENABLED START -----*/
	
	//	Add your own code
	set_state(Tango::OFF);
	/*----- PROTECTED REGION END -----*/	//	ZedGPIO::stop
}

/*----- PROTECTED REGION ID(ZedGPIO::namespace_ending) ENABLED START -----*/

//	Additional Methods

// //--------------------------------------------------------
// /**
//  *	Write attribute Leds related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevUChar
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void ZedGPIO::write_Leds(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "ZedGPIO::write_Leds(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevUChar	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	DEBUG_STREAM << "ZedGPIO val " << (int) w_val << endl;
// 	
//     	for (int i=0; i<8; i++)
// 	    {
// 	    write_zed_leds(i, ((((int) w_val) >> i) & 1) == 1 );
// 	    }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute Led related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void ZedGPIO::write_Led(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "ZedGPIO::write_Led(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	//try {
// 	Tango::DbData	dev_prop;
// 	dev_prop.push_back(Tango::DbDatum("led"));
// 	get_db_device()->get_property(dev_prop);
// 	DEBUG_STREAM << "PROPERTY " << dev_prop[0].name << endl;
// 	DEBUG_STREAM << dev_prop[0].value_string[0];
// 	//}catch() {}
// 	
// 	char buffer[32];
// 	int i=atoi(dev_prop[0].value_string[0].c_str());
// 	sprintf(buffer,"/sys/class/gpio/gpio%d/value",1016+i);
// 	int gpio = open(buffer, O_WRONLY);
// 	if (w_val)
// 		write(gpio, "1", 1);
// 	else 
// 		write(gpio, "0", 1);
// 	close(gpio);
// }


/*----- PROTECTED REGION END -----*/	//	ZedGPIO::namespace_ending
} //	namespace
